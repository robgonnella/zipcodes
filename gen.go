// The following directive is necessary to make the package coherent:

// +build ignore

// This program generates zipcodes.go. It can be invoked by running
// go generate
package main

import (
	"bufio"
	"encoding/csv"
	"io"
	"log"
	"strconv"
	"os"
	"text/template"
	"time"
)

type ZipcodeData struct {
	City  string
	State string
	Lat   float64
	Lng   float64
}

var zipcodes = make(map[string]ZipcodeData)

//go:generate bash -c "curl http://federalgovernmentzipcodes.us/free-zipcode-database-Primary.csv > zipcodes.csv"
func main() {
	csvFile, _ := os.Open("zipcodes.csv")
	reader := csv.NewReader(bufio.NewReader(csvFile))
	for {
		line, error := reader.Read()
		if error == io.EOF {
			break
		} else if error != nil {
			log.Fatal(error)
		}
		lat, _ := strconv.ParseFloat(line[5], 64)
		lng, _ := strconv.ParseFloat(line[6], 64)
		zipcodes[line[0]] = ZipcodeData{
			City: line[2],
			State: line[3],
			Lat: lat,
			Lng: lng,
		}
	}

	f, _ := os.Create("zipcodes.go")
	defer f.Close()

	packageTemplate.Execute(f, struct {
		Timestamp time.Time
		Zipcodes  map[string]ZipcodeData
	}{
		Timestamp: time.Now(),
		Zipcodes:  zipcodes,
	})
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}
package zipcodes

type ZipcodeData struct {
	City  string
	State string
	Lat   float64
	Lng   float64
}

var zipcodes = map[string]ZipcodeData{
{{- range $key, $value := .Zipcodes }}
    {{ printf "%q" $key }}: {{ printf "{%q,%q,%.2f,%.2f}," $value.City $value.State $value.Lat $value.Lng }}
{{- end }}
}
`))
